
package dvaprozora;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.time.Duration;
import java.time.LocalTime;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.SwingWorker;



public class DrugiProzor extends javax.swing.JFrame implements ActionListener {
    JFrame blinkanje;
    Vreme vreme;
    Color color;
    int blink;
    
    public DrugiProzor() {
        initComponents();
        start.addActionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        onTime = new javax.swing.JRadioButton();
        countdown = new javax.swing.JRadioButton();
        onTimeField = new javax.swing.JTextField();
        countdownField = new javax.swing.JTextField();
        chooseColor = new javax.swing.JButton();
        noColor = new javax.swing.JLabel();
        speed = new javax.swing.JLabel();
        speedBox = new javax.swing.JComboBox();
        start = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        onTime.setText("on time:");

        countdown.setText("countdown (mins)");

        chooseColor.setText("Choose color");
        chooseColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseColorActionPerformed(evt);
            }
        });

        noColor.setLabelFor(chooseColor);
        noColor.setText("No color selected");
        noColor.setOpaque(true);

        speed.setText("Speed:");

        speedBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        speedBox.setSelectedItem(1);
        speedBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedBoxActionPerformed(evt);
            }
        });

        start.setText("Start");

        stop.setText("Stop");
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(onTime)
                        .addGap(48, 48, 48)
                        .addComponent(onTimeField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(countdown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countdownField, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 154, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(speedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chooseColor)
                            .addComponent(start))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noColor, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onTime)
                    .addComponent(onTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countdown)
                    .addComponent(countdownField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseColor)
                    .addComponent(noColor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(speedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(start)
                    .addComponent(stop))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     
    private void chooseColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseColorActionPerformed
        JColorChooser jcc = new JColorChooser();
        color = jcc.showDialog(null,"Choose color",Color.white);
        noColor.setBackground(color);
        noColor.setVisible(true); 
    }//GEN-LAST:event_chooseColorActionPerformed

    private void speedBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedBoxActionPerformed
        String item = speedBox.getSelectedItem().toString();
        blink = Integer.parseInt(item);
    }//GEN-LAST:event_speedBoxActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        enabledButtons();
    }                    
    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
     if (!blinkanje.isVisible()) {
            enabledButtons();

        } else {
            blinkanje.dispose();
            enabledButtons();
        }
    }//GEN-LAST:event_stopActionPerformed

  
    
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrugiProzor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrugiProzor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrugiProzor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrugiProzor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrugiProzor().setVisible(true);
        }
     });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseColor;
    private javax.swing.JRadioButton countdown;
    private javax.swing.JTextField countdownField;
    private javax.swing.JLabel noColor;
    private javax.swing.JRadioButton onTime;
    private javax.swing.JTextField onTimeField;
    private javax.swing.JLabel speed;
    private javax.swing.JComboBox speedBox;
    private javax.swing.JButton start;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (onTime.isSelected()) {
            onTime();
        } else if (countdown.isSelected()) {
            countdown();
        } else {
            JOptionPane.showMessageDialog(null, "Morate izabrati opciju 'on time' ili 'countdown'", "Potrebno je izabrati jednu opciju", INFORMATION_MESSAGE);
        }

    }
    
    private void onTime() {
        if (!onTimeField.getText().equals("")) {
            Object onTime = onTimeField.getText();
            LocalTime t1 = LocalTime.now();
            LocalTime t2 = LocalTime.parse((CharSequence) onTime);
            int milsekunde= (int) Duration.between(t1, t2).toMillis();
            vreme = new Vreme(milsekunde, blinkBlink);
            vreme.start();
            vreme.setRepeats(false);
            disabledButtons();
        } else {
            JOptionPane.showMessageDialog(null, "Potrebno je uneti vreme za opciju 'on time'", "Unesite broj", INFORMATION_MESSAGE);
        }

    }

    private void countdown() {
        if (!countdownField.getText().equals("")) {
            Object zadatoVreme = countdownField.getText();
            String s = String.valueOf(zadatoVreme);
            int countdown = Integer.parseInt(s);
            int milsekunde = countdown * 1000;
            vreme = new Vreme(milsekunde, blinkBlink);
            vreme.start();
            vreme.setRepeats(false);
            disabledButtons();
        } else {
            JOptionPane.showMessageDialog(null, "Potrebno je uneti sekunde u opciju 'on time'", "Unesite broj", INFORMATION_MESSAGE);
        }
    }

    private void enabledButtons() {
        onTime.setEnabled(true);
        countdown.setEnabled(true);
        onTimeField.setEnabled(true);
        countdownField.setEnabled(true);
        chooseColor.setEnabled(true);
        start.setEnabled(true);
        stop.setEnabled(false);
        onTimeField.setEnabled(true);
        countdownField.setEnabled(true);
        speedBox.setEnabled(true);
    }

    private void disabledButtons() {
        onTime.setEnabled(false);
        countdown.setEnabled(false);
        onTimeField.setEnabled(false);
        countdownField.setEnabled(false);
        chooseColor.setEnabled(false);
        start.setEnabled(false);
        stop.setEnabled(true);
        onTimeField.setEnabled(false);
        countdownField.setEnabled(false);
        speed.setEnabled(false);
    }

    ActionListener blinkBlink = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {

            blinkanje = new JFrame();
            blinkanje.setSize(600, 600);
            blinkanje.setTitle("Blink prozor");
            blinkanje.setLocationRelativeTo(null);
            blinkanje.setVisible(true);
            blinkanje.getContentPane().setBackground(color);

            blinkanje.addWindowListener(new WindowAdapter() {
                @Override
                public void windowActivated(WindowEvent e) {
                    disabledButtons();
                }

                @Override
                public void windowDeactivated(WindowEvent e) {
                    enabledButtons();
                    blinkanje.dispose();
                }

            });

            SwingWorker prozori = new SwingWorker() {
                @Override
                protected Object doInBackground() {
                    while (true) {
                        try {
                            Thread.sleep(blink * 1000);
                            blinkanje.getContentPane().setBackground(Color.white);

                            Thread.sleep(blink * 1000);
                            blinkanje.getContentPane().setBackground(color);
                        } catch (InterruptedException ex) {
                            System.out.println("Greska: " + ex);
                        }
                    }

                }
            };
            prozori.execute();
        }

    };

};


